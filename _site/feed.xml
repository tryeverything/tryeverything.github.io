<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://192.168.1.7:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://192.168.1.7:4000/" rel="alternate" type="text/html" /><updated>2017-05-28T17:05:19+08:00</updated><id>http://192.168.1.7:4000/</id><title type="html">Good Good study Day Day up</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://192.168.1.7:4000/jekyll/update/2017/05/28/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-05-28T15:14:03+08:00</published><updated>2017-05-28T15:14:03+08:00</updated><id>http://192.168.1.7:4000/jekyll/update/2017/05/28/welcome-to-jekyll</id><content type="html" xml:base="http://192.168.1.7:4000/jekyll/update/2017/05/28/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">The first blog</title><link href="http://192.168.1.7:4000/2017/05/28/The-first-blog.html" rel="alternate" type="text/html" title="The first blog" /><published>2017-05-28T00:00:00+08:00</published><updated>2017-05-28T00:00:00+08:00</updated><id>http://192.168.1.7:4000/2017/05/28/The-first-blog</id><content type="html" xml:base="http://192.168.1.7:4000/2017/05/28/The-first-blog.html">&lt;p&gt;Hello World :P&lt;/p&gt;

&lt;p&gt;Today is nice day!&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello World :P</summary></entry><entry><title type="html">Python3下字符编码</title><link href="http://192.168.1.7:4000/2017/05/28/Python3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html" rel="alternate" type="text/html" title="Python3下字符编码" /><published>2017-05-28T00:00:00+08:00</published><updated>2017-05-28T00:00:00+08:00</updated><id>http://192.168.1.7:4000/2017/05/28/Python3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81</id><content type="html" xml:base="http://192.168.1.7:4000/2017/05/28/Python3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html">&lt;p&gt;本来打算用python处理csv文件，然后将结果显示在网页上。结果上来就卡死在字符编码上。win下python环境，print正常。但在家里的电脑上安装python后，pip无法安装其他模块，遂在VM下用ubuntu搭建环境。环境搭建好了，悲催的发现卡在字符编码上了。在win下正常的csv文件，到了Linux下，cat显示全是乱码，python甚至报错。然而结局却是峰回路转……&lt;/p&gt;

&lt;p&gt;将本次折腾的过程记载如下。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python testing&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以用python自带的locale模块来检测当前命令行的默认编码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;locale&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#get&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getdefaultlocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#('zh_CN','cp936')&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在树莓派中执行该命令返回为en_GB。而在VM的Ubuntu中却返回en_US。两者虽然都是英语，只不过en_GB一般指英国英语，而en_特指美国英语。&lt;/p&gt;</content><author><name></name></author><summary type="html">本来打算用python处理csv文件，然后将结果显示在网页上。结果上来就卡死在字符编码上。win下python环境，print正常。但在家里的电脑上安装python后，pip无法安装其他模块，遂在VM下用ubuntu搭建环境。环境搭建好了，悲催的发现卡在字符编码上了。在win下正常的csv文件，到了Linux下，cat显示全是乱码，python甚至报错。然而结局却是峰回路转……</summary></entry></feed>